using System.Text;
using Mapster;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Synoptis.API.Data;
using Synoptis.API.DTOs;
using Synoptis.API.Mappings;
using Synoptis.API.Models;
using Synoptis.API.Services;
using Synoptis.API.Services.Interfaces;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

// Enregistre les services MVC / API //Sans √ßa, ASP.NET Core ne saura pas comment instancier tes controllers, ni comment faire la liaison mod√®le ‚Üí JSON, ni appliquer les attributs [HttpGet], [FromBody], etc.

builder.Services.AddControllers()
//et la on s'occupe de permettre de recvoir du text json pour les enums
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.Converters.Add(new System.Text.Json.Serialization.JsonStringEnumConverter());
    });


// üîç On ajoute un explorateur de endpoints HTTP
// Il scanne les routes (GET, POST‚Ä¶) = d√©tection des routes
builder.Services.AddEndpointsApiExplorer();


// Pour la route /me pour 
TypeAdapterConfig.GlobalSettings.Scan(typeof(UserMappingConfig).Assembly);


// üîç On ajoute un explorateur de endpoints HTTP
// Il scanne les routes (GET, POST‚Ä¶) pour les rendre visibles dans Swagger = g√©n√©ration du document et de l‚ÄôUI
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Synoptis.API", Version = "v1" });
    // Voici la config pour activer le support JWT dans Swagger
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Entrer 'Bearer' suivi d'un espace et du token JWT. \r\n\r\nExemple : \"Bearer abcdef12345\""
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});


// Ici je connecte/j'enregistre le DB context dans le program.cs 

builder.Services.AddDbContext<SynoptisDbContext>(options => options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// Ici j'ajoute le service appel d'offre pour pouvoir l'injecter dans le controlleurs.

builder.Services.AddScoped<IAppelOffreService, AppelOffreService>();
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<TokenService>();
builder.Services.AddScoped<EnumToStringService>();


// üîë Lecture de la cl√© JWT depuis la configuration et v√©rification qu'elle est bien d√©finie
var jwtKey = builder.Configuration["Jwt:Key"]
    ?? throw new InvalidOperationException("JWT secret key is missing.");

// üîê Configure le syst√®me d'authentification de l'application pour utiliser le sch√©ma JWT Bearer par d√©faut
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        // ‚öôÔ∏è Param√®tres de validation du token JWT re√ßu dans les requ√™tes
        options.TokenValidationParameters = new TokenValidationParameters
        {
            // ‚úÖ V√©rifie que l'√©metteur du token est bien celui attendu (ex: ton backend)
            ValidateIssuer = true,

            // ‚úÖ V√©rifie que l‚Äôaudience du token correspond √† ce que tu attends (ex: un client autoris√©)
            ValidateAudience = true,

            // ‚úÖ V√©rifie que le token n'est pas expir√©
            ValidateLifetime = true,

            // ‚úÖ V√©rifie que la signature du token est valide (gr√¢ce √† la cl√© secr√®te)
            ValidateIssuerSigningKey = true,

            // üéØ L‚Äô√©metteur attendu du token (doit correspondre √† la valeur dans le token)
            ValidIssuer = builder.Configuration["Jwt:Issuer"],

            // üéØ L‚Äôaudience attendue du token (pareil, doit correspondre)
            ValidAudience = builder.Configuration["Jwt:Audience"],

            // üîê Utilisation de la Cl√© utilis√©e pour valider la signature du token
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey))
        };
    });

// üõÇ Active le syst√®me d'autorisation bas√© sur les [Authorize], r√¥les, policies, etc.
// N√©cessaire pour que les contr√¥leurs puissent v√©rifier si l'utilisateur est autoris√© √† acc√©der √† une ressource
builder.Services.AddAuthorization();

// 1) D√©clare la politique CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontend", policy =>
    {
        policy
          .WithOrigins("http://localhost:3000")
          .AllowAnyHeader()
          .AllowAnyMethod();
    });
});

// üèóÔ∏è On construit l'application avec les services d√©finis au-dessus
var app = builder.Build();

// Configure the HTTP request pipeline.
// üß™ Si on est en mode d√©veloppement (local, pas prod)
if (app.Environment.IsDevelopment())
{

    // üìÑ G√©n√®re le fichier swagger.json contenant toutes les routes d√©crites
    app.UseSwagger();
    // üíª Affiche l‚Äôinterface web Swagger √† l‚ÄôURL /swagger
    app.UseSwaggerUI();
}

// // üîê Redirige automatiquement vers HTTPS si l'utilisateur utilise HTTP
// app.UseHttpsRedirection();

// 2) Place UseCors AVANT UseAuthorization / MapControllers
app.UseCors("AllowFrontend");

// üîì Analyse le token JWT envoy√© dans l'en-t√™te Authorization, v√©rifie sa validit√©,
// et identifie l'utilisateur (principal) √† partir du token.
// Obligatoire pour que le syst√®me [Authorize] fonctionne
app.UseAuthentication();

// ‚úÖ Une fois que l'utilisateur est "authentifi√©", cette √©tape v√©rifie s'il est "autoris√©"
// √† acc√©der √† une route (selon les r√¥les, policies, ou simplement la pr√©sence du token)
app.UseAuthorization();

// üîÑ Connecte les routes des contr√¥leurs les active on vas dire
// Exemple : [Route("api/ao")] dans AOController ‚Üí devient accessible
//Sans √ßa, m√™me si tes controllers sont enregistr√©s, aucune route ne sera active pour les atteindre : tes m√©thodes [HttpGet], [HttpPost], etc. ne r√©pondront pas.
app.MapControllers();

app.Use(async (context, next) =>
{
    var endpoint = context.GetEndpoint();
    if (endpoint != null)
        Console.WriteLine($"[ROUTE MATCH] {endpoint.DisplayName}");

    await next();
});


// ‚ñ∂Ô∏è Lancement de l'application
app.Run();

