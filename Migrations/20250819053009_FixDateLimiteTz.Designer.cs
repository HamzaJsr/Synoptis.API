// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Synoptis.API.Data;

#nullable disable

namespace Synoptis.API.Migrations
{
    [DbContext(typeof(SynoptisDbContext))]
    [Migration("20250819053009_FixDateLimiteTz")]
    partial class FixDateLimiteTz
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Synoptis.API.Models.AppelOffre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateLimite")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedById");

                    b.ToTable("AppelOffres");
                });

            modelBuilder.Entity("Synoptis.API.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormeJuridique")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Synoptis.API.Models.DocumentAppelOffre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppelOffreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateDepot")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeposeParId")
                        .HasColumnType("uuid");

                    b.Property<string>("NomFichier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppelOffreId");

                    b.HasIndex("DeposeParId");

                    b.ToTable("DocumentsAppelOffre");
                });

            modelBuilder.Entity("Synoptis.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreeLe")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ResponsableId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Synoptis.API.Models.AppelOffre", b =>
                {
                    b.HasOne("Synoptis.API.Models.Company", "Company")
                        .WithMany("AppelsOffre")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synoptis.API.Models.User", "CreatedBy")
                        .WithMany("AppelOffres")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Synoptis.API.Models.DocumentAppelOffre", b =>
                {
                    b.HasOne("Synoptis.API.Models.AppelOffre", "AppelOffre")
                        .WithMany("Documents")
                        .HasForeignKey("AppelOffreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synoptis.API.Models.User", "DeposePar")
                        .WithMany("DocumentsDeposes")
                        .HasForeignKey("DeposeParId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppelOffre");

                    b.Navigation("DeposePar");
                });

            modelBuilder.Entity("Synoptis.API.Models.User", b =>
                {
                    b.HasOne("Synoptis.API.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Synoptis.API.Models.User", "Responsable")
                        .WithMany("Collaborateurs")
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("Synoptis.API.Models.AppelOffre", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Synoptis.API.Models.Company", b =>
                {
                    b.Navigation("AppelsOffre");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Synoptis.API.Models.User", b =>
                {
                    b.Navigation("AppelOffres");

                    b.Navigation("Collaborateurs");

                    b.Navigation("DocumentsDeposes");
                });
#pragma warning restore 612, 618
        }
    }
}
